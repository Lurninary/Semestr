{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://semestr/./YouTubeAPI.mjs","webpack://semestr/./main.js"],"sourcesContent":["class YouTubeVideo {\r\n    constructor(id, title, author, preview, upload, views, duration)\r\n    {\r\n        this.id = id\r\n        this.title = title\r\n        this.author = author\r\n        this.preview = preview\r\n        this.upload = upload\r\n        this.views = views\r\n        this.duration = duration\r\n    }\r\n\r\n    static searchConstructor(id, title, author, preview, upload)\r\n    {\r\n        return new YouTubeVideo(id, title, author, preview, upload, \"\", \"\")\r\n    }\r\n}\r\n\r\nclass YouTubeAPI {\r\n    constructor(apiKey) {\r\n        this.apiKey = apiKey;\r\n    }\r\n\r\n    getVideoDetails(videoId) {\r\n        const url = `https://youtube.googleapis.com/youtube/v3/videos?part=snippet,statistics,contentDetails,id&id=${videoId}&key=${this.apiKey}`;\r\n        let DataArray = []\r\n        console.log(`getVideoDetails: Sending request to ${url}`);\r\n        return fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            DataArray.push(new YouTubeVideo(\r\n            data.items[0].id,\r\n            data.items[0].snippet.title,\r\n            data.items[0].snippet.channelTitle,\r\n            data.items[0].snippet.thumbnails.high.url,\r\n            data.items[0].snippet.publishedAt,\r\n            data.items[0].statistics.viewCount,\r\n            data.items[0].contentDetails.duration\r\n            ))\r\n        return DataArray;\r\n        });\r\n    }\r\n\r\n    searchVideosWithFilters(query, maxResults, filters) {\r\n        let url = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&type=video&maxResults=${maxResults}&key=${this.apiKey}`;\r\n        let DataArray = []\r\n        if (filters) {\r\n        if (filters.orderBy) {\r\n            url += `&order=${filters.orderBy}`;\r\n        }\r\n        if (filters.publishedAfter) {\r\n            url += `&publishedAfter=${filters.publishedAfter}`;\r\n        }\r\n        if (filters.publishedBefore) {\r\n            url += `&publishedBefore=${filters.publishedBefore}`;\r\n        }\r\n        if (filters.videoDefinition) {\r\n            url += `&videoDefinition=${filters.videoDefinition}`;\r\n        }\r\n        }\r\n        console.log(`searchVideosWithFilters: Sending request to ${url}`);\r\n        return fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            for(let i=0; i<data.items.length; i++){\r\n                DataArray.push(YouTubeVideo.searchConstructor(\r\n                data.items[i].id.videoId,\r\n                data.items[i].snippet.title,\r\n                data.items[i].snippet.channelTitle,\r\n                data.items[i].snippet.thumbnails.high.url,\r\n                data.items[i].snippet.publishedAt\r\n                ))\r\n            }\r\n        return DataArray;\r\n        });\r\n    }\r\n}\r\n\r\nexport {YouTubeAPI, YouTubeVideo};","import { YouTubeAPI } from \"./YouTubeAPI.mjs\"\r\n\r\nconst apiKey = 'AIzaSyCXAv-2ZqSYc3BCF0ZL04t3ynrnrECTkQ0'\r\nconst youtube = new YouTubeAPI(apiKey);\r\n\r\nconst videosTable = document.getElementById('videos')\r\nconst searchTable = document.getElementById('searchData')\r\nconst infoTable = document.getElementById('videoInfo')\r\n\r\nconst docTitle = document.getElementById('userName')\r\nconst webLink = document.getElementById('link')\r\nconst searchButton = document.getElementById('search_button')\r\nconst getVideo = document.getElementById('get_video')\r\nconst deleteVideo = document.getElementById('deleteButton')\r\nconst query = document.getElementById('query')\r\nconst addButton = document.getElementById('addButton')\r\n\r\nconst dateCb = document.getElementById('dateFilter')\r\nconst ratingCb = document.getElementById('ratingFilter')\r\nconst viewCountCb = document.getElementById('viewCountFilter')\r\n\r\nlet name = prompt(\"Привет! Как вас зовут?\")\r\ndocTitle.textContent = \"Привет, \" + name + \"!\";\r\n\r\nlet videosData = []\r\nlet searchData = []\r\nlet filters = {\r\n    type: \"video\",\r\n    orderBy: \"\",\r\n    videoDefinition: \"high\",\r\n    videoEmbeddable: \"true\"\r\n};\r\n\r\nfunction renderTable(data, table)\r\n{\r\n    table.innerHTML=''\r\n    console.log(\"start render \" + table.id)\r\n    for (let video of data)\r\n    {\r\n        let row = document.createElement('tr')\r\n\r\n        for (let item in video)\r\n        {\r\n            if (item !== '')\r\n            {\r\n                let column = document.createElement('th')\r\n\r\n                if(item != \"preview\")\r\n                {\r\n                    column.textContent = video[item] \r\n                }else\r\n                {\r\n                    let link = document.createElement(\"a\")\r\n                    link.href = 'https://www.youtube.com/watch?v=' + video.id\r\n                    let image = document.createElement(\"img\")\r\n                    image.src = video[item]\r\n                    link.appendChild(image)\r\n                    column.appendChild(link)\r\n                }\r\n                row.appendChild(column)\r\n            }\r\n        }\r\n        \r\n        setListener(row, 'click', () => {\r\n            if(row.id != 'selected')\r\n            {\r\n                row.id = 'selected'\r\n                row.className = table.id\r\n                row.style.backgroundColor = 'lightblue'\r\n                console.log(row)\r\n            } else {\r\n                row.id = ''\r\n                row.className = ''\r\n                row.style.backgroundColor = document.getElementById('searchData').style.backgroundColor\r\n            }\r\n            \r\n        })\r\n\r\n        table.appendChild(row)\r\n    }\r\n}\r\n\r\nconst setListener = (element, type, handler) => {\r\n    console.log(\"Adding listener to \" + element.id)\r\n    if (!element) \r\n    {\r\n        return\r\n    }\r\n    element.addEventListener(type, handler)\r\n    return () => {\r\n        element.removeEventListener(type, handler)\r\n    }\r\n    \r\n}\r\n\r\nfunction selectRows() {\r\n    let selectedRows = []\r\n    for (let item of document.querySelectorAll('tr'))\r\n    {\r\n        if(item.id == 'selected'){\r\n            selectedRows.push(item)\r\n        } \r\n    }\r\n    return selectedRows\r\n}\r\n\r\nfunction checkboxesInit() {\r\n    const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]');\r\n    \r\n    checkboxes.forEach((checkbox) => {\r\n        setListener(checkbox, 'click', () => {\r\n        checkboxes.forEach((cb) => {\r\n            if (cb !== checkbox && cb.checked) {\r\n                cb.checked = false\r\n            }\r\n        })\r\n    \r\n        if (checkbox.checked) {\r\n            filters.orderBy = checkbox.value\r\n        }\r\n        })\r\n    })\r\n}\r\n\r\ncheckboxesInit()\r\n\r\nsetListener(addButton, 'click', async () => {\r\n    console.log('Add')\r\n    for (let item of selectRows())\r\n    {\r\n        if (item.className == \"searchData\")\r\n        {\r\n            let searchId = searchData[item.rowIndex].id\r\n            youtube.getVideoDetails(searchId)\r\n            .then(video => {\r\n                console.log(video)\r\n                videosData.push(video[0])\r\n                renderTable(videosData, videosTable)\r\n            })\r\n            item.click()\r\n        }\r\n    }\r\n});\r\n\r\nsetListener(getVideo, 'click', async () => {\r\n    youtube.getVideoDetails(webLink.value.replace('https://www.youtube.com/watch?v=', ''))\r\n    .then(video => {\r\n        console.log(video);\r\n        renderTable(video, infoTable)\r\n    })\r\n    .catch(error => {\r\n        console.error(error);\r\n    });\r\n})\r\n\r\nsetListener(webLink, 'keypress', (event) => {\r\n    if(event.key === 'Enter' && webLink)\r\n    {\r\n        event.preventDefault()\r\n        getVideo.click()\r\n    }\r\n})\r\n\r\nsetListener(deleteVideo, 'click', () => {\r\n    console.log('Delete')\r\n    for (let item of selectRows())\r\n    {\r\n        if (item.className == 'videos')\r\n        {\r\n            delete videosData[item.rowIndex]\r\n        \r\n            videosData = videosData.filter(item => Object.keys(item).length !== 0)\r\n        }\r\n    }\r\n    renderTable(videosData, videosTable)\r\n})\r\n\r\nsetListener(searchButton, 'click', async () => {\r\n    searchData = []\r\n    youtube.searchVideosWithFilters(query.value, 5, filters)\r\n    .then(async (videos) => {\r\n        console.log(videos);\r\n        for (let item of videos) {\r\n            let searchVideos = await youtube.getVideoDetails(item.id)\r\n            console.log(searchVideos[0])\r\n            searchData.push(searchVideos[0])\r\n            console.log(searchData)\r\n        }\r\n        renderTable(searchData, searchTable)\r\n    })\r\n    .catch(error => {\r\n    console.error(error);\r\n    });\r\n})\r\n\r\nsetListener(query, 'keypress', (event) => {\r\n    if(event.key === 'Enter' && query)\r\n    {\r\n        event.preventDefault()\r\n        searchButton.click()\r\n    }\r\n})"],"names":["YouTubeVideo","constructor","id","title","author","preview","upload","views","duration","this","static","youtube","apiKey","getVideoDetails","videoId","url","DataArray","console","log","fetch","then","response","json","data","push","items","snippet","channelTitle","thumbnails","high","publishedAt","statistics","viewCount","contentDetails","searchVideosWithFilters","query","maxResults","filters","orderBy","publishedAfter","publishedBefore","videoDefinition","i","length","searchConstructor","videosTable","document","getElementById","searchTable","infoTable","docTitle","webLink","searchButton","getVideo","deleteVideo","addButton","prompt","textContent","videosData","searchData","type","videoEmbeddable","renderTable","table","innerHTML","video","row","createElement","item","column","link","href","image","src","appendChild","setListener","className","style","backgroundColor","element","handler","addEventListener","removeEventListener","selectRows","selectedRows","querySelectorAll","checkboxes","forEach","checkbox","cb","checked","value","checkboxesInit","async","searchId","rowIndex","click","replace","catch","error","event","key","preventDefault","filter","Object","keys","videos","searchVideos"],"sourceRoot":""}