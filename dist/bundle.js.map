{"version":3,"file":"bundle.js","mappings":"mBAEA,MAAMA,EAAWC,SAASC,eAAe,QACnCC,EAAUF,SAASC,eAAe,QAClCE,EAAeH,SAASC,eAAe,iBACvCG,EAAWJ,SAASC,eAAe,aAEnCI,EAAU,ICLhB,MACIC,YAAYC,GACRC,KAAKD,OAASA,CAClB,CAEAE,aAAaC,EAAOC,GAChB,MAAMC,EAAM,+DAA+DF,2BAA+BC,SAAkBH,KAAKD,SAEjI,OADAM,QAAQC,IAAI,oCAAoCF,KACzCG,MAAMH,GACZI,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,GACaA,EAAKC,MAAMC,KAAIC,IAAQ,CACtCC,GAAID,EAAKE,QAAQC,WAAWC,QAC5BC,MAAOL,EAAKE,QAAQG,MACpBC,OAAQN,EAAKE,QAAQK,aACrBC,QAASR,EAAKE,QAAQO,WAAWC,OAAOpB,SAIhD,CAEAqB,gBAAgBP,GACZ,MAAMd,EAAM,2EAA2Ec,SAAelB,KAAKD,SAE3G,OADAM,QAAQC,IAAI,uCAAuCF,KAC5CG,MAAMH,GACZI,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,IACY,CACdI,GAAIJ,EAAKC,MAAM,GAAGI,QAAQC,WAAWC,QACrCC,MAAOR,EAAKC,MAAM,GAAGI,QAAQG,MAC7BC,OAAQT,EAAKC,MAAM,GAAGI,QAAQK,aAC9BK,MAAOf,EAAKC,MAAM,GAAGe,WAAWC,UAChCC,SAAUlB,EAAKC,MAAM,GAAGkB,eAAeD,SACvCP,QAASX,EAAKC,MAAM,GAAGI,QAAQO,WAAWC,OAAOpB,OAIzD,CAEA2B,wBAAwB7B,EAAOC,EAAY6B,GACvC,IAAI5B,EAAM,+DAA+DF,2BAA+BC,SAAkBH,KAAKD,SAgB/H,OAfIiC,IACAA,EAAQC,UACR7B,GAAO,UAAU4B,EAAQC,WAEzBD,EAAQE,iBACR9B,GAAO,mBAAmB4B,EAAQE,kBAElCF,EAAQG,kBACR/B,GAAO,oBAAoB4B,EAAQG,mBAEnCH,EAAQI,kBACRhC,GAAO,oBAAoB4B,EAAQI,oBAGvC/B,QAAQC,IAAI,+CAA+CF,KACpDG,MAAMH,GACZI,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,GACaA,EAAKC,MAAMC,KAAIC,IAAQ,CACtCC,GAAID,EAAKC,GAAGG,QACZC,MAAOL,EAAKE,QAAQG,MACpBC,OAAQN,EAAKE,QAAQK,aACrBC,QAASR,EAAKE,QAAQO,WAAWC,OAAOpB,SAIhD,GD/DW,2CAEf,IAEI,EAAOiC,OAAO,0BAClB9C,EAAS+C,YAAc,EAEvB,MAAMC,EAAc,CAACC,EAASC,EAAMC,KAEhC,GADArC,QAAQC,IAAI,iCACPkC,EAIL,OADAA,EAAQG,iBAAiBF,EAAMC,GACxB,KACHF,EAAQI,oBAAoBH,EAAMC,EAAO,CAC7C,EAOJH,EAAY3C,EAAU,SAAS,KAC3BC,EAAQ4B,gBAAgB/B,EAAQ4C,YAAYO,QAAQ,qCACnDrC,MAAKsC,IACFzC,QAAQC,IAAIwC,EAAM,IAErBC,OAAMC,IACH3C,QAAQ2C,MAAMA,EAAM,GACtB,IAIN,MAAMhB,EAAU,CACdC,QAAS,YACTC,eAAgB,uBAChBE,gBAAiB,QAGnBG,EAAY5C,EAAc,SAAS,KAC/BE,EAAQkC,wBAAwB,sBAAuB,EAAGC,GACzDxB,MAAKyC,IACN5C,QAAQC,IAAI2C,EAAO,IAElBF,OAAMC,IACP3C,QAAQ2C,MAAMA,EAAM,GAClB,G","sources":["webpack://semestr/./main.js","webpack://semestr/./YouTubeAPI.mjs"],"sourcesContent":["import { YouTubeAPI } from \"./YouTubeAPI.mjs\"\r\n\r\nconst docTitle = document.getElementById('name')\r\nconst webLink = document.getElementById('link')\r\nconst searchButton = document.getElementById('search_button')\r\nconst getVideo = document.getElementById('get_video')\r\nconst apiKey = 'AIzaSyCXAv-2ZqSYc3BCF0ZL04t3ynrnrECTkQ0'\r\nconst youtube = new YouTubeAPI(apiKey);\r\nlet searched_id = ''\r\n\r\nlet name = prompt(\"Привет! Как вас зовут?\")\r\ndocTitle.textContent = name;\r\n\r\nconst setListener = (element, type, handler) => {\r\n    console.log(\"Adding listener to ${element}\")\r\n    if (!element) {\r\n        return\r\n    }\r\n    element.addEventListener(type, handler)\r\n    return () => {\r\n        element.removeEventListener(type, handler)\r\n    }\r\n    \r\n}\r\n\r\n// Получение информации о видео\r\n\r\n\r\nsetListener(getVideo, 'click', () => {\r\n    youtube.getVideoDetails(webLink.textContent.replace('https://www.youtube.com/watch?v='))\r\n    .then(video => {\r\n        console.log(video);\r\n    })\r\n    .catch(error => {\r\n        console.error(error);\r\n    });\r\n})\r\n\r\n// Поиск видео на YouTube с фильтрами\r\nconst filters = {\r\n  orderBy: \"viewCount\",\r\n  publishedAfter: \"2022-01-01T00:00:00Z\",\r\n  videoDefinition: \"high\"\r\n};\r\n\r\nsetListener(searchButton, 'click', () => {\r\n    youtube.searchVideosWithFilters(\"JavaScript tutorial\", 1, filters)\r\n    .then(videos => {\r\n    console.log(videos);\r\n    })\r\n    .catch(error => {\r\n    console.error(error);\r\n    });\r\n})\r\n\r\n\r\n","\r\n\r\nclass YouTubeAPI {\r\n    constructor(apiKey) {\r\n        this.apiKey = apiKey;\r\n    }\r\n\r\n    searchVideos(query, maxResults) {\r\n        const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&type=video&maxResults=${maxResults}&key=${this.apiKey}`;\r\n        console.log(`searchVideos: Sending request to ${url}`);\r\n        return fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const videos = data.items.map(item => ({\r\n            id: item.snippet.resourceId.videoId,\r\n            title: item.snippet.title,\r\n            author: item.snippet.channelTitle,\r\n            preview: item.snippet.thumbnails.medium.url\r\n            }));\r\n            return videos;\r\n        });\r\n    }\r\n\r\n    getVideoDetails(videoId) {\r\n        const url = `https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id=${videoId}&key=${this.apiKey}`;\r\n        console.log(`getVideoDetails: Sending request to ${url}`);\r\n        return fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const video = {\r\n            id: data.items[0].snippet.resourceId.videoId,\r\n            title: data.items[0].snippet.title,\r\n            author: data.items[0].snippet.channelTitle,\r\n            views: data.items[0].statistics.viewCount,\r\n            duration: data.items[0].contentDetails.duration,\r\n            preview: data.items[0].snippet.thumbnails.medium.url\r\n            };\r\n            return video;\r\n        });\r\n    }\r\n\r\n    searchVideosWithFilters(query, maxResults, filters) {\r\n        let url = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&type=video&maxResults=${maxResults}&key=${this.apiKey}`;\r\n        if (filters) {\r\n        if (filters.orderBy) {\r\n            url += `&order=${filters.orderBy}`;\r\n        }\r\n        if (filters.publishedAfter) {\r\n            url += `&publishedAfter=${filters.publishedAfter}`;\r\n        }\r\n        if (filters.publishedBefore) {\r\n            url += `&publishedBefore=${filters.publishedBefore}`;\r\n        }\r\n        if (filters.videoDefinition) {\r\n            url += `&videoDefinition=${filters.videoDefinition}`;\r\n        }\r\n        }\r\n        console.log(`searchVideosWithFilters: Sending request to ${url}`);\r\n        return fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const videos = data.items.map(item => ({\r\n            id: item.id.videoId,\r\n            title: item.snippet.title,\r\n            author: item.snippet.channelTitle,\r\n            preview: item.snippet.thumbnails.medium.url\r\n            }));\r\n            return videos;\r\n        });\r\n    }\r\n}\r\n\r\nexport {YouTubeAPI};"],"names":["docTitle","document","getElementById","webLink","searchButton","getVideo","youtube","constructor","apiKey","this","searchVideos","query","maxResults","url","console","log","fetch","then","response","json","data","items","map","item","id","snippet","resourceId","videoId","title","author","channelTitle","preview","thumbnails","medium","getVideoDetails","views","statistics","viewCount","duration","contentDetails","searchVideosWithFilters","filters","orderBy","publishedAfter","publishedBefore","videoDefinition","prompt","textContent","setListener","element","type","handler","addEventListener","removeEventListener","replace","video","catch","error","videos"],"sourceRoot":""}