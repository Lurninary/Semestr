{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://semestr/./YouTubeAPI.mjs","webpack://semestr/./main.js"],"sourcesContent":["class YouTubeVideo {\r\n    constructor(id, title, author, views, duration, preview, upload)\r\n    {\r\n        this.id = id\r\n        this.title = title\r\n        this.author = author\r\n        this.preview = preview\r\n        this.views = views\r\n        this.duration = duration\r\n        this.upload = upload\r\n    }\r\n}\r\n\r\nclass YouTubeAPI {\r\n    constructor(apiKey) {\r\n        this.apiKey = apiKey;\r\n    }\r\n\r\n    searchVideos(query, maxResults) {\r\n        const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&type=video&maxResults=${maxResults}&key=${this.apiKey}`;\r\n        let DataArray = []\r\n        console.log(`searchVideos: Sending request to ${url}`);\r\n        return fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            for(let i=0; i<data.items.length; i++){\r\n                DataArray.push(new YouTubeVideo(\r\n                data.items[i].id,\r\n                data.items[i].snippet.title,\r\n                data.items[i].snippet.channelTitle,\r\n                data.items[i].statistics.viewCount,\r\n                data.items[i].contentDetails.duration,\r\n                data.items[i].snippet.thumbnails.medium.url,\r\n                data.items[i].snippet.publishedAt\r\n                ))\r\n            }\r\n        return DataArray;\r\n        });\r\n    }\r\n\r\n    getVideoDetails(videoId) {\r\n        const url = `https://youtube.googleapis.com/youtube/v3/videos?part=snippet,statistics,contentDetails,id&id=${videoId}&key=${this.apiKey}`;\r\n        let DataArray = []\r\n        console.log(`getVideoDetails: Sending request to ${url}`);\r\n        return fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            DataArray.push(new YouTubeVideo(\r\n            data.items[0].id,\r\n            data.items[0].snippet.title,\r\n            data.items[0].snippet.channelTitle,\r\n            data.items[0].statistics.viewCount,\r\n            data.items[0].contentDetails.duration,\r\n            data.items[0].snippet.thumbnails.medium.url,\r\n            data.items[0].snippet.publishedAt\r\n            ))\r\n        return DataArray;\r\n        });\r\n    }\r\n\r\n    searchVideosWithFilters(query, maxResults, filters) {\r\n        let url = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&type=video&maxResults=${maxResults}&key=${this.apiKey}`;\r\n        let DataArray = []\r\n        if (filters) {\r\n        if (filters.orderBy) {\r\n            url += `&order=${filters.orderBy}`;\r\n        }\r\n        if (filters.publishedAfter) {\r\n            url += `&publishedAfter=${filters.publishedAfter}`;\r\n        }\r\n        if (filters.publishedBefore) {\r\n            url += `&publishedBefore=${filters.publishedBefore}`;\r\n        }\r\n        if (filters.videoDefinition) {\r\n            url += `&videoDefinition=${filters.videoDefinition}`;\r\n        }\r\n        }\r\n        console.log(`searchVideosWithFilters: Sending request to ${url}`);\r\n        return fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            for(let i=0; i<data.items.length; i++){\r\n                DataArray.push(new YouTubeVideo(\r\n                data.items[i].id,\r\n                data.items[i].snippet.title,\r\n                data.items[i].snippet.channelTitle,\r\n                null,\r\n                null,\r\n                data.items[i].snippet.thumbnails.medium.url,\r\n                data.items[i].snippet.publishedAt\r\n                ))\r\n            }\r\n        return DataArray;\r\n        });\r\n    }\r\n}\r\n\r\nexport {YouTubeAPI, YouTubeVideo};","import { YouTubeAPI, YouTubeVideo } from \"./YouTubeAPI.mjs\"\r\n\r\nconst docTitle = document.getElementById('name')\r\nconst webLink = document.getElementById('link')\r\nconst searchButton = document.getElementById('search_button')\r\nconst getVideo = document.getElementById('get_video')\r\nconst apiKey = 'AIzaSyCXAv-2ZqSYc3BCF0ZL04t3ynrnrECTkQ0'\r\nconst youtube = new YouTubeAPI(apiKey);\r\nlet searched_id = ''\r\n\r\nlet name = prompt(\"Привет! Как вас зовут?\")\r\ndocTitle.textContent = name;\r\n\r\nconst setListener = (element, type, handler) => {\r\n    console.log(\"Adding listener to ${element}\")\r\n    if (!element) {\r\n        return\r\n    }\r\n    element.addEventListener(type, handler)\r\n    return () => {\r\n        element.removeEventListener(type, handler)\r\n    }\r\n    \r\n}\r\n\r\n// Получение информации о видео\r\n\r\n\r\nsetListener(getVideo, 'click', () => {\r\n    youtube.getVideoDetails(webLink.value.replace('https://www.youtube.com/watch?v=', ''))\r\n    .then(video => {\r\n        console.log(video);\r\n    })\r\n    .catch(error => {\r\n        console.error(error);\r\n    });\r\n})\r\n\r\n// Поиск видео на YouTube с фильтрами\r\nconst filters = {\r\n  orderBy: \"viewCount\",\r\n  publishedAfter: \"2022-01-01T00:00:00Z\",\r\n  videoDefinition: \"high\",\r\n  videoEmbeddable: \"true\"\r\n};\r\n\r\nsetListener(searchButton, 'click', () => {\r\n    youtube.searchVideosWithFilters(\"JavaScript_tutorial\", 5, filters)\r\n    .then(videos => {\r\n    console.log(videos);\r\n    })\r\n    .catch(error => {\r\n    console.error(error);\r\n    });\r\n})"],"names":["YouTubeVideo","constructor","id","title","author","views","duration","preview","upload","this","docTitle","document","getElementById","webLink","searchButton","getVideo","youtube","apiKey","searchVideos","query","maxResults","url","DataArray","console","log","fetch","then","response","json","data","i","items","length","push","snippet","channelTitle","statistics","viewCount","contentDetails","thumbnails","medium","publishedAt","getVideoDetails","videoId","searchVideosWithFilters","filters","orderBy","publishedAfter","publishedBefore","videoDefinition","prompt","textContent","setListener","element","type","handler","addEventListener","removeEventListener","value","replace","video","catch","error","videoEmbeddable","videos"],"sourceRoot":""}